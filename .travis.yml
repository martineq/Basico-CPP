# Selección del lenguaje: C++
language: cpp

# Seleeción de compiladores
compiler:
  - gcc

# Creo un directorio dedicado a la instalación
before_install:
  - mkdir temp_install

# Instalo todas las dependencias
install:
  - sudo apt-get update -qq
  - sudo apt-get install -y -qq lcov curl build-essential python git cmake wget unzip valgrind tree
  - sudo apt-get install -y -qq libsnappy-dev zlib1g-dev libbz2-dev
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get update
  - sudo apt-get install -y gcc-4.9 g++-4.9
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 10
  - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 10
  - sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-4.9 10
  - sudo update-alternatives --config gcc
  - sudo update-alternatives --config g++
  - sudo update-alternatives --config gcov
  - sudo make --version
  - sudo add-apt-repository ppa:george-edison55/cmake-3.x
  - sudo apt-get update
  - sudo apt-get install cmake
  - sudo make --version
  - sudo rm -rf /var/lib/apt/lists/*
  - cd temp_install
  - sudo wget https://gflags.googlecode.com/files/libgflags0_2.0-1_amd64.deb
  - sudo dpkg -i libgflags0_2.0-1_amd64.deb
  - sudo wget https://gflags.googlecode.com/files/libgflags-dev_2.0-1_amd64.deb
  - sudo dpkg -i libgflags-dev_2.0-1_amd64.deb
#  - sudo wget https://github.com/facebook/rocksdb/archive/master.zip
#  - sudo unzip master.zip
#  - cd rocksdb-master
#  - sudo make static_lib
#  - sudo cp librocksdb.a /usr/local/lib
#  - cd ..
#  - sudo rm -rf rocksdb-master
#  - sudo rm master.zip
  - sudo wget https://github.com/cesanta/mongoose/archive/master.zip
  - sudo unzip master.zip
  - cd mongoose-master
  - sudo gcc -c mongoose.c
  - sudo ar rvs libmongoose.a mongoose.o
  - sudo cp libmongoose.a /usr/local/lib
  - cd ..
  - sudo rm -rf mongoose-master
  - sudo rm master.zip
  - sudo wget https://github.com/open-source-parsers/jsoncpp/archive/master.zip
  - sudo unzip master.zip
  - cd jsoncpp-master
  - sudo python amalgamate.py
  - cd dist
  - sudo gcc -c jsoncpp.cpp
  - sudo ar rvs libjsoncpp.a jsoncpp.o
  - sudo cp libjsoncpp.a /usr/local/lib
  - cd ../..
  - sudo rm -rf jsoncpp-master
  - sudo rm master.zip
  - cd ..
  - sudo rm -rf temp_install

# Creo un directorio dedicado al build
before_script:
  - mkdir build

# Inicio el script para correr las pruebas y enviar los datos a coveralls.io, a partir de CMake
script: 
  - cd build
  - sudo cmake -DCOVERALLS=ON -DCMAKE_BUILD_TYPE=Debug ..
  - sudo make
  - sudo make coveralls
